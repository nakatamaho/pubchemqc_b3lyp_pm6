diff -ur gamess_orig/comp gamess/comp
--- gamess_orig/comp	2018-02-15 12:10:06.000000000 +0900
+++ gamess/comp	2018-04-09 14:16:03.000000000 +0900
@@ -1810,7 +1810,7 @@
 #     -WB means warn but don't fail on out-of-bounds array references
 #     -ftz flushes underflow results to zero
 #
-      set OPT = '-O2'
+      set OPT = '-xHOST -O2'
       if (".$GMS_DEBUG_FLAGS" != .) set OPT="$GMS_DEBUG_FLAGS"
 #       alas, I'm so tired of hearing about so many versions failing to
 #       diagonalize, that this time critical code is run w/o optimization.
@@ -1886,9 +1886,9 @@
 #
 #  there are four supported 64 bit compilers: gfortran, ifort, pgf77, pathf90
 #
-   switch ($GMS_FORTRAN)
+   switch (a$GMS_FORTRAN)
 
-   case gfortran:
+   case agfortran:
       if ($MODULE == Libtad) then
 #  an ugly sed hack to replace IDATE (Libtad conforms to ifort's idate)
          echo Using sed to port IDATE to gfortran...
@@ -2037,7 +2037,7 @@
       unset echo
       breaksw
 
-   case ifort:
+   case aifort:
 #     -i4/-i8 set default integer length
 #     -On can have n=1,2,3.  Use of 3 caused problems with earlier
 #          compilers, so it isn't being used here.  Try it if you like.
@@ -2072,6 +2072,7 @@
       if (($MODULE == rohfcc) && ($GMS_IFORT_VERNO >= 12)) \
                               set OPT='-O0' # exam42+exam47 (op.sh.CC,IP-EOM)
       if  ($MODULE == tdxitr) set OPT='-O1' # 10.0, exam39
+      if  ($MODULE == tddint) set OPT='-O1' # compiler internal error by parallel_studio_xe_2016_update3
       if  ($MODULE == vscf)   set OPT='-O0' # intensities for combinations
       if  ($MODULE == zheev)  set OPT='-O0' # defensive compiling
 
Only in gamess: comp~
diff -ur gamess_orig/compall gamess/compall
--- gamess_orig/compall	2018-02-08 06:15:23.000000000 +0900
+++ gamess/compall	2018-04-09 14:17:02.000000000 +0900
@@ -272,6 +272,7 @@
 # compile the subset of files, where modules are defined,
 # which are used in other files.
 #
+cat << EOF > __comp
 ./comp params
 ./comp mpcdatpm6
 ./comp mpchbond
@@ -584,6 +585,8 @@
 ./comp zapddi
 ./comp zheev
 ./comp zmatrx
+EOF
+cat __comp | awk '{print $2}' | parallel -j%%PARALLEL%% -a - 'csh ./comp {}'
 #
 #                 four plug-in codes are available:
 #      TINKER  is available from the GAMESS web site    (see INTRO.DOC),

diff -ur gamess_orig/ddi/compddi gamess/ddi/compddi
--- gamess_orig/ddi/compddi	2018-02-08 06:15:23.000000000 +0900
+++ gamess/ddi/compddi	2018-04-09 14:13:32.000000000 +0900
@@ -751,8 +751,8 @@
 
      if ($SHMTYPE == posix) set CLIBS="$CLIBS -lrt"
 
-     switch ($FORTRAN)
-        case gfortran:
+     switch (a$FORTRAN)
+        case agfortran:
            set CFLAGS = "$CFLAGS -Dgetarg_=_gfortran_getarg_i4"
            set CFLAGS = "$CFLAGS -Diargc_=_gfortran_iargc"
            set NumUS=1
@@ -768,7 +768,7 @@
              set FORT_FLAGS = "-O2 $ARCH -i8 -mcmodel=medium"
            endif
            breaksw
-        case ifort:
+        case aifort:
            set NumUS=1
            set FORT_FLAGS = "-O2 -i8"
            if ($GMS_PHI == knc) set FORT_FLAGS="$FORT_FLAGS -mmic"

--- gamess_orig/rungms	2018-02-08 06:15:24.000000000 +0900
+++ gamess/rungms	2018-04-09 16:31:21.000000000 +0900
@@ -60,10 +60,11 @@
 #       both Sun Grid Engine (SGE), and Portable Batch System (PBS).
 #       See also a very old LoadLeveler "ll-gms" for some IBM systems.
 #
+setenv LANG 
 set TARGET=sockets
-set SCR=/scr/$USER
-set USERSCR=/u1/$USER/scr
-set GMSPATH=/u1/mike/gamess
+set SCR=.
+set USERSCR=.
+set GMSPATH=/home/maho/freeenergy/gamess
 #
 set JOB=$1      # name of the input file xxx.inp, give only the xxx part
 set VERNO=$2    # revision number of the executable created by 'lked' step
@@ -76,7 +77,7 @@
 #  ---- the top third of the script is input and other file assignments ----
 #
 echo "----- GAMESS execution script 'rungms' -----"
-set master=`hostname`
+set master=localhost
 echo This job is running on host $master
 echo under operating system `uname` at `date`
 #
@@ -344,7 +345,18 @@
 #       2. Sequential execution is sure to be on this very same host
    if ($NCPUS == 1) then
       set NNODES=1
-      set HOSTLIST=(`hostname`)
+      set HOSTLIST=localhost
+   endif
+   if ($NCPUS >= 1) then
+      set NNODES=$NCPUS
+      set HOST=localhost
+      set HOSTLIST=$HOST
+      @ CPU=1
+      while ($CPU < $NNODES)
+         set HOSTLIST=($HOSTLIST $HOST)
+         @ CPU++
+      end
+      unset $CPU
    endif
 #
 #       3. This is an example of how to run on a multi-core SMP enclosure,

diff -ur gamess_orig/lked gamess/lked
--- gamess/lked.orig	2018-02-08 06:15:24.000000000 +0900
+++ gamess/lked	2018-04-09 18:05:35.435915208 +0900
@@ -360,13 +360,13 @@
 #
 #  settings which depend on the compiler choice:
 #
-   switch ($GMS_FORTRAN)
-     case gfortran:
+   switch (a$GMS_FORTRAN)
+     case agfortran:
         set LDR='gfortran'
         set LDOPTS=' '
         set FORTLIBS=' '
         breaksw
-     case ifort:
+     case aifort:
         set LDR='ifort'
         set LDOPTS=' '  # add '-Wl,-M' to see load map
         set FORTLIBS='-Vaxlib'
@@ -442,6 +442,12 @@
       set BLAS=' '
       breaksw
 
+   case openblas
+      #     do a static link so that only compile node needs to install ACML
+      set MATHLIBS="$GMS_MATHLIB_PATH/libopenblas.a"
+      set BLAS=' '
+      breaksw
+
    case none:
    default:
       echo "Warning.  No math library was found, you should install one."
@@ -489,14 +495,14 @@
 #
 #  settings which depend on the FORTRAN:
 #
-   switch ($GMS_FORTRAN)
-      case gfortran:
+   switch (a$GMS_FORTRAN)
+      case agfortran:
          set LDR='gfortran'
          set LDOPTS=' '
          set FORTLIBS=' '
          if ($GMS_OPENMP == true)    set LDOPTS="$LDOPTS -fopenmp"
          breaksw
-      case ifort:
+      case aifort:
          set LDR='ifort'
          set LDOPTS='-i8'  # -Wl,-M generates a load map
 #            this auxiliary library seems to have disappeared in ifort 10
