diff --git a/src/mol.cpp b/src/mol.cpp
index 744bc80..a72c566 100644
--- a/src/mol.cpp
+++ b/src/mol.cpp
@@ -1178,6 +1178,8 @@ namespace OpenBabel
   //!  It is calculated from the atomic spin multiplicity information
   //!  assuming the high-spin case (i.e. it simply sums the number of unpaired
   //!  electrons assuming no further pairing of spins.
+  //!  if it fails (gives singlet for odd number of electronic systems),
+  //!  then assign wrt parity of the total electrons.
   unsigned int OBMol::GetTotalSpinMultiplicity()
   {
     if (HasFlag(OB_TSPIN_MOL))
@@ -1191,13 +1193,19 @@ namespace OpenBabel
         OBAtom *atom;
         vector<OBAtom*>::iterator i;
         unsigned int unpaired_electrons = 0;
-
+        int chg = GetTotalCharge();
+        printf("charge %d\n", chg);
         for (atom = BeginAtom(i);atom;atom = NextAtom(i))
           {
             if (atom->GetSpinMultiplicity() > 1)
               unpaired_electrons += (atom->GetSpinMultiplicity() - 1);
+           chg += atom->GetAtomicNum();
           }
-        return (unpaired_electrons + 1);
+        printf("charge %d\n", chg);
+        if (chg % 2 != unpaired_electrons %2)
+          return ((abs(chg) % 2) + 1);
+        else
+          return (unpaired_electrons + 1);
       }
   }
 
diff --git a/src/mol.cpp b/src/mol.cpp
index 744bc80..3536432 100644
--- a/src/mol.cpp
+++ b/src/mol.cpp
@@ -994,7 +994,7 @@ namespace OpenBabel
     for (int i = 0; i < NumElements; ++i)
       atomicCount[i] = 0;
 
-    bool UseImplicitH = (NumBonds()!=0 || NumAtoms()==1);
+    bool UseImplicitH = false; //(NumBonds()!=0 || NumAtoms()==1);
     // Do not use implicit hydrogens if explicitly required not to
     if (!implicitH) UseImplicitH = false;
     bool HasHvyAtoms = NumHvyAtoms()>0;
